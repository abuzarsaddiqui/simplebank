// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: entery.sql

package db

import (
	"context"
	"database/sql"
)

const createEntery = `-- name: CreateEntery :one
INSERT INTO enteries (
  account_id,
  amount
) VALUES (
  $1, $2
) RETURNING id, account_id, amount, created_at
`

type CreateEnteryParams struct {
	AccountID sql.NullInt64 `json:"account_id"`
	Amount    int64         `json:"amount"`
}

func (q *Queries) CreateEntery(ctx context.Context, arg CreateEnteryParams) (Entery, error) {
	row := q.db.QueryRowContext(ctx, createEntery, arg.AccountID, arg.Amount)
	var i Entery
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntery = `-- name: DeleteEntery :exec
DELETE FROM enteries
WHERE id = $1
`

func (q *Queries) DeleteEntery(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntery, id)
	return err
}

const getEntery = `-- name: GetEntery :one
SELECT id, account_id, amount, created_at FROM enteries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntery(ctx context.Context, id int64) (Entery, error) {
	row := q.db.QueryRowContext(ctx, getEntery, id)
	var i Entery
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEnteries = `-- name: ListEnteries :many
SELECT id, account_id, amount, created_at FROM enteries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEnteriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEnteries(ctx context.Context, arg ListEnteriesParams) ([]Entery, error) {
	rows, err := q.db.QueryContext(ctx, listEnteries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entery
	for rows.Next() {
		var i Entery
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntery = `-- name: UpdateEntery :exec
UPDATE enteries
SET amount = $2
WHERE id = $1
RETURNING id, account_id, amount, created_at
`

type UpdateEnteryParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateEntery(ctx context.Context, arg UpdateEnteryParams) error {
	_, err := q.db.ExecContext(ctx, updateEntery, arg.ID, arg.Amount)
	return err
}
